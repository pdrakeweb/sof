#!/usr/bin/env ruby
require 'rubygems'

# Created by bundle install --standalone
require_relative '../bundle/bundler/setup'

require 'thor'

require_relative '../lib/sof'
require_relative '../lib/sof/runner'
require_relative '../lib/sof/manifest'

class SofCommand < Thor
  method_option :manifest, required: false, type: :string, aliases: '-m', desc: 'specify manifest'
  method_option :verbose, required: false, default: false, type: :boolean, aliases: '-v', desc: 'be verbose'
  method_option :debug, required: false, default: false, type: :boolean, aliases: '-d', desc: 'output debugging'
  method_option :log, required: false, default: false, type: :boolean, aliases: '-l', desc: 'write failures to syslog'
  method_option :timeout, required: false, default: 30, type: :numeric, aliases: '-t', desc: 'default check timeout'
  method_option :server_concurrency, required: false, default: 10, type: :numeric, aliases: '-s', desc: 'The number of servers to concurrently check'
  method_option :check_concurrency, required: false, default: 5, type: :numeric, aliases: '-c', desc: 'The number of concurrent checks to run per server'
  desc 'check-server', 'Takes a list of servers (ADDRESS:TYPE) and a SSH port to check if they are on fire'
  def check_server
    if options[:manifest].nil?
      manifest = standard_io_yaml
    else
      manifest = Sof::Manifest.get(options[:manifest])
    end
    sof_options = Sof::Options.set_options(options)
    sof = Sof::Runner.new(manifest)
    sof.run_checks
    sof.output_results
    sof.log_results if options[:log]
    rescue Sof::ManifestError => e
      raise Thor::Error, e.message
  end

  private

  def standard_io_yaml
    puts 'Please enter your manifest in YAML format:'
    manifest = ''
    line = ''
    loop do
      line = STDIN.gets
      manifest << line
      break if line == "\n"
    end
    raise Thor::Error, 'Invalid manifest' unless YAML.load(manifest).instance_of?(Hash)
    YAML.load(manifest)
  end

  def self.start(given_args = ARGV, config = {})
    super(given_args, config)
  rescue Interrupt
    puts 'Interrupted.'
    exit 1
  end

  def self.exit_on_failure?
    true
  end
end

SofCommand.start
